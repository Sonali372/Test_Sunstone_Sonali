package T1;

//Custom Exception
class InvalidProductException extends Exception {
 public InvalidProductException(String message) {
     super(message);
 }
}

//Product Class
class Product {
 int productId;
 String productName;
 double price;
 int quantity;

 // Constructor with all fields
 public Product(int productId, String productName, double price, int quantity) throws InvalidProductException {
     if (price < 0 || quantity < 0) {
         throw new InvalidProductException("Price and Quantity must be non-negative.");
     }
     this.productId = productId;
     this.productName = productName;
     this.price = price;
     this.quantity = quantity;
 }

 // Constructor with productId and productName only
 public Product(int productId, String productName) {
     this.productId = productId;
     this.productName = productName;
     this.price = 0.0;
     this.quantity = 0;
 }

 // Method to display product info
 public void display() {
     System.out.println("Product ID: " + productId + ", Name: " + productName +
             ", Price: " + price + ", Quantity: " + quantity);
 }
}

//Product Manager Class
public class T2 {

 // Overloaded addProduct() method - full details
 public static Product addProduct(int productId, String productName, double price, int quantity) throws InvalidProductException {
     return new Product(productId, productName, price, quantity);
 }

 // Overloaded addProduct() method - name and price only
 public static Product addProduct(String productName, double price) throws InvalidProductException {
     return new Product(0, productName, price, 0);  // default productId=0, quantity=0
 }

 // Overloaded addProduct() method - name, price, and quantity
 public static Product addProduct(String productName, double price, int quantity) throws InvalidProductException {
     return new Product(0, productName, price, quantity); // default productId=0
 }

 public static void main(String[] args) {
     try {
         // Using constructor with all fields
         Product p1 = new Product(101, "Laptop", 50000, 5);
         p1.display();

         // Using constructor with only ID and name
         Product p2 = new Product(102, "Mouse");
         p2.display();

         // Using overloaded addProduct methods
         Product p3 = addProduct(103, "Keyboard", 1200, 10);
         Product p4 = addProduct("Monitor", 8000);
         Product p5 = addProduct("Speaker", 1500, 4);

         // Display added products
         p3.display();
         p4.display();
         p5.display();

         // Triggering custom exception with negative values
         Product p6 = addProduct(104, "Camera", -4000, 2);  // This will throw exception

     } catch (InvalidProductException e) {
         System.out.println("Exception Caught: " + e.getMessage());
     }
 }
}

